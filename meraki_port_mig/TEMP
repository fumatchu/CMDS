#Stacked Switch Config 1
CONFIG1=$(ls /root/.meraki_port_mig/tmp/switch1.txt 2>/dev/null)
SERIAL1=$(ls /root/.meraki_port_mig/tmp/serial1.txt 2>/dev/null)
CATSERIAL=$(cat /root/.meraki_port_mig/tmp/serial1.txt 2>/dev/null)
if [[ "$CONFIG1" == "/root/.meraki_port_mig/tmp/switch1.txt" && "$SERIAL1" == "/root/.meraki_port_mig/tmp/serial1.txt" ]]; then
    echo "${GREEN}${IP}-Found switch 1"
    echo "New CloudID is:${CATSERIAL}${TEXTRESET}"
    \cp -f /root/.meraki_port_mig/tmp/switch1.txt /root/.meraki_port_mig/cisco_config.tmp
    \cp -f /root/.meraki_port_mig/tmp/serial1.txt /root/.meraki_port_mig/serial.txt
    #Move the Uplink ports to a separate file
    awk '/interface GigabitEthernet1\/1\/1/ {start = NR; flag = 1} flag {lines[NR] = $0} /interface FortyGigabitEthernet1\/1\/2/ {end = NR; flag = 0} END {if (start && end) {for (i=start; i<=end; i++) print lines[i]}}' /root/.meraki_port
_mig/cisco_config.tmp >/root/.meraki_port_mig/cisco_config_up1.tmp
    #Remove the uplinks from the file
    awk '/interface GigabitEthernet1\/1\/1/,/interface FortyGigabitEthernet1\/1\/2/{next}1' /root/.meraki_port_mig/cisco_config.tmp >temp_file && mv -f temp_file /root/.meraki_port_mig/cisco_config.tmp
    unbuffer python3.10 /root/.meraki_port_mig/port_migration.py
    rm -f /root/.meraki_port_mig/cisco_config.tmp
else
    echo " " > /dev/null
fi

#Stacked Switch Config 2
CONFIG2=$(ls /root/.meraki_port_mig/tmp/switch2.txt 2>/dev/null)
SERIAL2=$(ls /root/.meraki_port_mig/tmp/serial2.txt 2>/dev/null)
CATSERIAL=$(cat /root/.meraki_port_mig/tmp/serial2.txt 2>/dev/null)
if [[ "$CONFIG2" == "/root/.meraki_port_mig/tmp/switch2.txt" && "$SERIAL2" == "/root/.meraki_port_mig/tmp/serial2.txt" ]]; then
    echo "${GREEN}${IP}-Found switch 2"
    echo "New CloudID is:${CATSERIAL}${TEXTRESET}"
    \cp -f /root/.meraki_port_mig/tmp/switch2.txt /root/.meraki_port_mig/cisco_config.tmp
    \cp -f /root/.meraki_port_mig/tmp/serial2.txt /root/.meraki_port_mig/serial.txt
    #Move the Uplink ports to a separate file
    awk '/interface GigabitEthernet2\/1\/1/ {start = NR; flag = 1} flag {lines[NR] = $0} /interface AppGigabitEthernet2\/0\/1/ {end = NR; flag = 0} END {if (start && end) {for (i=start; i<=end; i++) print lines[i]}}' /root/.meraki_port_m
ig/cisco_config.tmp >/root/.meraki_port_mig/cisco_config_up2.tmp
    #Remove the uplinks from the file
    awk '/interface GigabitEthernet2\/1\/1/,/interface AppGigabitEthernet2\/0\/1/{next}1' /root/.meraki_port_mig/cisco_config.tmp >temp_file && mv -f temp_file /root/.meraki_port_mig/cisco_config.tmp
    unbuffer python3.10 /root/.meraki_port_mig/port_migration.py
    rm -f /root/.meraki_port_mig/cisco_config.tmp
else
    echo " " > /dev/null
fi

#Stacked Switch Config 3
CONFIG3=$(ls /root/.meraki_port_mig/tmp/switch3.txt 2>/dev/null)
SERIAL3=$(ls /root/.meraki_port_mig/tmp/serial3.txt 2>/dev/null)
CATSERIAL=$(cat /root/.meraki_port_mig/tmp/serial3.txt 2>/dev/null)
if [[ "$CONFIG3" == "/root/.meraki_port_mig/tmp/switch3.txt" && "$SERIAL3" == "/root/.meraki_port_mig/tmp/serial3.txt" ]]; then
    echo "${GREEN}${IP}-Found switch 3"
    echo "New CloudID is:${CATSERIAL}${TEXTRESET}"
    \cp -f /root/.meraki_port_mig/tmp/switch3.txt /root/.meraki_port_mig/cisco_config.tmp
    \cp -f /root/.meraki_port_mig/tmp/serial3.txt /root/.meraki_port_mig/serial.txt
    #Move the Uplink ports to a separate file
    awk '/interface GigabitEthernet3\/1\/1/ {start = NR; flag = 1} flag {lines[NR] = $0} /interface AppGigabitEthernet3\/0\/1/ {end = NR; flag = 0} END {if (start && end) {for (i=start; i<=end; i++) print lines[i]}}' /root/.meraki_port_m
ig/cisco_config.tmp >/root/.meraki_port_mig/cisco_config_up3.tmp
    #Remove the uplinks from the file
    awk '/interface GigabitEthernet3\/1\/1/,/interface AppGigabitEthernet3\/0\/1/{next}1' /root/.meraki_port_mig/cisco_config.tmp >temp_file && mv -f temp_file /root/.meraki_port_mig/cisco_config.tmp
    unbuffer python3.10 /root/.meraki_port_mig/port_migration.py
    rm -f /root/.meraki_port_mig/cisco_config.tmp
else
    echo " " > /dev/null
fi
